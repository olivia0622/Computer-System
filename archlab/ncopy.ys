#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# Name:mimi chen  ID:mimic1
# Describe how and why you modified the baseline code.
# Here is the stategies that I used to optimize ncopy.ps
#   1. with Loop unrolling, it will reduces the number of operations that do not contribute directly to
#   loop result, including loop indexing and conditional branching. In this program, loop unrolling will 
#   reduce data dependences
#   2. Convert code to use IADDQ instruction
# Describe How I modify pipe-full.hcl
#   Analyze the process of implement of IADDQ
#   As what we can see IADDQ D,rB therefore it has a valC, rBï¼Œtherefore it need valC in the fetch stage,but 
#   do not need srcA as the input in the decode stage. In the execute stage, it will select valC as the input 
#   A for ALU. In the other parts, iaddq is just like OPQ, therefore i modify as follows

##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax          # count = 0
        iaddq $-6,%rdx          # len = len -6
        jl Low
Loop:  
	mrmovq (%rdi), %r10     # read val from src...
	mrmovq $8(%rdi),%r8
        andq %r10, %r10         # val <= 0?        
        rmmovq %r10, (%rsi)     # ...and store it to dst
        jle GNpos1                # if so, goto Npos:
        iaddq $1,%rax           # count++
GNpos1:
        andq %r8, %r8
        rmmovq %r8, $8(%rsi)
        jle GNpos2
        iaddq $1,%rax
GNpos2:
        mrmovq $16(%rdi), %r10
	mrmovq $24(%rdi), %r8
        andq %r10, %r10
        rmmovq %r10, $16(%rsi)
        jle GNpos3
        iaddq $1,%rax
GNpos3:
        andq %r8, %r8
        rmmovq %r8, $24(%rsi)
        jle GNpos4
        iaddq $1,%rax
GNpos4:
        mrmovq $32(%rdi), %r10
	mrmovq $40(%rdi), %r8
        andq %r10, %r10
        rmmovq %r10, $32(%rsi)
        jle GNpos5
        iaddq $1,%rax
GNpos5:
        andq %r8, %r8
        rmmovq %r8, $40(%rsi)
        jle Next
        iaddq $1,%rax
Next:  
        iaddq $48,%rdi
        iaddq $48,%rsi
        iaddq $-6,%rdx
        jge Loop
Low:    
        iaddq $5,%rdx         #len max = 5
        jl Done
        mrmovq (%rdi), %r10
        mrmovq $8(%rdi),%r8
        andq %r10, %r10
        rmmovq %r10, (%rsi)
        jle LNpos1
        iaddq $1,%rax
LNpos1: iaddq $-1, %rdx         # len--
        jl Done
        andq %r8, %r8
        rmmovq %r8, $8(%rsi)
        jle LNpos2
        iaddq $1,%rax
LNpos2: iaddq $-1, %rdx         # len--
        jl Done
        mrmovq $16(%rdi), %r10
	mrmovq $24(%rdi), %r8
        andq %r10, %r10
        rmmovq %r10, $16(%rsi)          
        jle LNpos3
        iaddq $1,%rax
LNpos3: iaddq $-1, %rdx         # len--
        jl Done
        andq %r8, %r8
        rmmovq %r8, $24(%rsi)          
        jle LNpos4
        iaddq $1,%rax
LNpos4: iaddq $-1, %rdx         # len--
        jl Done
        mrmovq $32(%rdi), %r10
        andq %r10, %r10
        rmmovq %r10, $32(%rsi)
        jle Done
        iaddq $1,%rax
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
